### 7.28
(a) Take the below graph as example. Since size(f) = 1, if we send the flow only through the shortest path (i.e. through S-A-B-T), $\sum{f_el_e} = shortest path$. If we send flow both through shortest path and other path, or even only through other path(i.e. through S-A-C-T),  $\sum{f_el_e}$ will be larger than the value of the shortest path. Thus, the shortest path $p_s \leq \sum{f_el_e}$. When flow only go through the shortest path, equality holds.
![image](https://github.com/chouxi/512-hw/raw/master/7-28.png)

(b) 
$min\sum l_ef_e$
$\sum{f_{s,v}}=1$
$\sum{f_{v,t}}=1$
$\forall u\in V, u\neq s, u\neq t$
$\quad \sum{f_{u,v}} - \sum{f_{u,v}} = 0,(w,u)\in E, (e,v)\in E$
$\forall e\in E:f_e\geq 0$

(c) 
Since $x_u - x_v \leq l_{uv}\quad for\, all (u,v)\in E$, we can write $x_s - x_t$ as below:
$x_s - x_{p_1} \leq l_{s{p_1}}$
$x_{p_1} - x_{p_2} \leq l_{{p_1}{p_2}}$
$x_{p_3} - x_{p_3} \leq l_{{p_2}{p_3}}$
$\cdot \cdot \cdot$
$x_{p_n} - x_{t} \leq l_{{p_n}{p_t}}$
adding all the above inequalities up, we can get $x_s- x_{t} \leq \sum{l_p}$, where $l_p$ is all the edges along a path from $S$ to $T$. Since we want to find the maximum of $l_p$, we have to find the lowest lowerbound $\sum{l_p}$ which is exactly the same as finding the shortest path in the graph.

(d) 
The difference is that the example on page 209 is trying to find the shortest path in an undirected graph, thus, the constraints are $|x_u - x_v \leq w_{uv}|$. Whereas this problem is dealing with a directed graph.


### 7.31
(a) If the algorithm happened to find path S-A-B-T first, it will send a flow  of 1. And then at next step, it could choose path S-B-A-T, and send a flow of 1. This flow over A-B and B-A might last for 1000 iterations for S-A or S-B to achieve capacity. 

(b) Using the idea of Dijkstra's algorithm, when finding the path, update the vertex's value as the smallest capacity along the path reaching it from S. And when choosing the next node, always choose the one that its edge has the largest capacity. In this way, we can compute the fattest s-t path.

(c) Max flow is equal to mimum cut. Every cut is represented by an edge, and all the flows on these edges form the max flow. Since there could be no more than $|E|$ cuts, there will be at most $|E|$ individual flows from s to t that form the max flow.

(d) As proved in (c), if the max flow is the sum of individual flows along at most |E| paths from s to t, the fattest flow assigned must be larger or equal to F/|E|. So let $f_{t+1}$ and f_{t} be the max flow in the residual graph after t and t+1 iterations, we then can have the relationship between them:
$c_{t+1} \leq c_t- \frac{c_t} {|E|}$ 
And this recurrence relation will take $O(|E|logF)$ 